// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 敵処理 [enemy.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "enemy.h"
#include "player.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define ENEMY_KEYMOVE (1)
#define ENEMY_G (0.5f)			// 重力
#define ENEMY_RESISTANCE (0.5f)// 抵抗力
#define ENEMY_MOTIONFILE "data/LOAD/CHARACTER/buffalo_motion.txt"	// モーションのファイル名

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーロードコンストラクタ(自身用)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CEnemy::CEnemy() : CCharacter::CCharacter(ACTOR_ENEMY)
{
	m_Ai = AI_NORMALACTION;
	m_bAttackCollision = false;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーロードコンストラクタ(子供用)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CEnemy::CEnemy(ACTOR actor) : CCharacter::CCharacter(actor)
{
	m_Ai = AI_NORMALACTION;
	m_bAttackCollision = false;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CEnemy::~CEnemy()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::Init(void)
{
	CCharacter::Init();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::Uninit(void)
{
	CCharacter::Uninit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::Update(void)
{
	CCharacter::Update();
	// 行動選択
	AiSerect();
	// 攻撃時は入らない
	if (!CCharacter::GetAttack() || 
		!(CCharacter::GetState() == CCharacter::STATE_DAMAGE ||
		CCharacter::GetState() == CCharacter::STATE_DIE))
	{
		AiAction();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::Draw(void)
{
	CCharacter::Draw();
}

#ifdef _DEBUG
//-------------------------------------------------------------------------------------------------------------
// デバッグ表示
//-------------------------------------------------------------------------------------------------------------
void CEnemy::Debug(void)
{
}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 生成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CEnemy * CEnemy::Create()
{
	// 変数宣言
	CEnemy * pEnemy;
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pEnemy = new CEnemy();
	pEnemy->CCharacter::SetCharacter(CHARACTER_ENEMY);
	// 初期化処理
	pEnemy->Init();
	// 生成したオブジェクトを返す
	return pEnemy;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CEnemy::Load(void)
{
	CCharacter::Load(
		CCharacter::CHARACTER_ENEMY,
		MOTIONTYPE_MAX, 
		ENEMY_MOTIONFILE);
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::UnLoad(void)
{
	CCharacter::UnLoad(
		CCharacter::CHARACTER_ENEMY,
		MOTIONTYPE_MAX);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 行動選択処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::AiSerect(void)
{
	// 変数宣言
	CPlayer *pPlayer;
	// 情報取得
	for (int nCntLayer = 0; nCntLayer < CScene::GetMaxLayer(CScene::LAYER_CHARACTER); nCntLayer++)
	{
		pPlayer = (CPlayer*)CScene::GetActor(CScene::ACTOR_PLAYER,CScene::LAYER_CHARACTER, nCntLayer);
		// ヌルチェック
		if (pPlayer == NULL)
		{
			continue;
		}
		// 攻撃行動に
		if (CCalculation::Collision_Circle(
			CCharacter::GetPos(),
			1000.0f,
			pPlayer->GetPos(),
			50.0f
		))
		{
			m_Ai = AI_ATTACKACTION;
		}
		// 普段の行動
		else
		{
			m_Ai = AI_NORMALACTION;
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 行動処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::AiAction(void)
{
	switch (m_Ai)
	{
	case AI_NORMALACTION:
		NormalAction();
		break;
	case AI_ATTACKACTION:
		AttackAction();
		break;
	default:
		break;
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 攻撃行動処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::AttackAction(void)
{
	// ダメージや死亡状態の時は関数を抜ける
	if (CCharacter::GetState() == CCharacter::STATE_DAMAGE ||
		CCharacter::GetState() == CCharacter::STATE_DIE)
	{
		return;
	}

	// 変数宣言
	D3DXVECTOR3 diffpos,move,rot;	// 位置、移動、回転
	bool bMove = false;			// 移動状態
	
	// 情報取得
	move = CCharacter::GetMove();	// 移動量
	rot = CCharacter::GetRotDest();	// 回転

	// 変数宣言
	CPlayer *pPlayer;
	// 情報取得
	for (int nCntLayer = 0; nCntLayer < CScene::GetMaxLayer(CScene::LAYER_CHARACTER); nCntLayer++)
	{
		pPlayer = (CPlayer*)CScene::GetActor(CScene::ACTOR_PLAYER, CScene::LAYER_CHARACTER, nCntLayer);
		// ヌルチェック
		if (pPlayer == NULL)
		{
			continue;
		}
		diffpos = CCharacter::GetPos() - pPlayer->GetPos();
		// 攻撃判定
		if (abs(CCalculation::DiffPoint(
			D3DXVECTOR2(CCharacter::GetPos().x, CCharacter::GetPos().z),
			D3DXVECTOR2(pPlayer->GetPos().x, pPlayer->GetPos().z))) < 50.0f)
		{
			m_bAttackCollision = true;
			return;
		}
		else
		{
			m_bAttackCollision = false;
		}
		// 百獣の王から見てプレイヤーがいる角度
		rot.y = (atan2f(diffpos.x, diffpos.z));
		CCharacter::SetRotDest(rot);
		move.x = sinf(rot.y + D3DX_PI) * 1.0f;
		move.z = cosf(rot.y + D3DX_PI) * 1.0f;
		break;
	}
	CCharacter::SetMove(move);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 普段の行動処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CEnemy::NormalAction(void)
{
	// 変数宣言
	D3DXVECTOR3 diffpos, move, rot;	// 位置、移動、回転

	// 情報取得
	move = CCharacter::GetMove();	// 移動量

	move.x = 0.0f;
	move.z = 0.0f;
	CCharacter::SetMove(move);
}