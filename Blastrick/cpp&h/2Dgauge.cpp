// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 2Dゲージ処理の説明[2Dgauge.cpp]
// Author : Koki Nishiyama
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 描画 */
#include "2Dgauge.h"
#include "scene_two.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 C2DGauge::m_pTex = NULL;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge::C2DGauge() : CScene::CScene(ACTOR_2DGAUGE, LAYER_UI)
{
	// 初期化
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		m_aScene_Two[nCnt] = NULL;
		m_size[nCnt] = D3DVECTOR2_ZERO;		// サイズ情報
		m_col[nCnt] = D3DXCOLOR_INI;		// カラー情報
	}
	m_fSizeLast = 0;						// サイズの目標値
	m_fSizeDiff = 0;						// サイズの差分
	m_fConstance = 0;						// サイズが変わる定数
	m_pos = D3DVECTOR3_ZERO;				// 位置情報
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge::~C2DGauge()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Init(void)
{
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		m_aScene_Two[nCnt] = CScene_TWO::Create(
			CScene_TWO::OFFSET_TYPE_LEFT,
			m_pos,
			m_size[nCnt],
			ACTOR_2DGAUGE,
			0.0f,
			m_col[nCnt]
		);
		m_aScene_Two[nCnt]->BindTexture(m_pTex);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Uninit(void)
{
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		m_aScene_Two[nCnt] = NULL;
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Update(void)
{
	// ゲージの長さが0未満の場合抜ける
	if (m_size[GAUGE_UNDERLINE].x < 0)
	{
		return;
	}
	// プレイヤーのHPが変わっていない場合関数を抜ける
	else if (m_size[GAUGE_UNDERLINE].x == m_fSizeLast)
	{
		return;
	}
	// 差分分割加算
	m_size[GAUGE_UNDERLINE].x += m_fSizeDiff;
	// 目的のサイズ量に合わせる
	if (m_size[GAUGE_UNDERLINE].x < m_fSizeLast)
	{
		m_size[GAUGE_UNDERLINE].x = m_fSizeLast;
	}
	// 位置の設定
	m_aScene_Two[GAUGE_UNDERLINE]->SetSize(m_size[GAUGE_UNDERLINE]);
	// 頂点座標の設定
	m_aScene_Two[GAUGE_UNDERLINE]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
}


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Draw(void)
{
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Debug(void)
{
	CDebugproc::Print("位置(%.3f,%.3f)\n", m_pos.x, m_pos.y);

}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT C2DGauge::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice =		// デバイスの取得
		CManager::GetRenderer()->GetDevice();

	/* テクスチャーのロード */
	D3DXCreateTextureFromFile(pDevice, "", &m_pTex);
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::UnLoad(void)
{
	// テクスチャの開放
	if (m_pTex != NULL)
	{
		m_pTex->Release();
		m_pTex = NULL;
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge * C2DGauge::Create(
	D3DXVECTOR3 const &pos,			// 位置
	D3DXVECTOR2 const &size,		// サイズ
	D3DXCOLOR	const &Maincol,		// メインの色
	D3DXCOLOR	const &Undercol,	// 下の色
	D3DXCOLOR	const &Blockcol		// ブロックの色
)
{
	// 変数宣言
	C2DGauge * p2DGauge;
	// メモリの生成(初め->基本クラス,後->派生クラス)
	p2DGauge = new C2DGauge();
	// 設定h
	p2DGauge->SetCol(Maincol, Undercol, Blockcol);	// カラー
	p2DGauge->m_pos = pos;							// 位置
	for (int nCntGauge = 0; nCntGauge < GAUGE_MAX; nCntGauge++)
	{
		p2DGauge->m_size[nCntGauge] = size;			// サイズ
	}
	p2DGauge->m_fSizeLast = size.x;					// サイズの目標値
	// 初期化処理
	p2DGauge->Init();
	// 生成したオブジェクトを返す
	return p2DGauge;
}


// ------------------------------------------------------------------------------------------
// 
// ゲージの変化
// 
// ------------------------------------------------------------------------------------------
void C2DGauge::ChangeGauge(
	float const &fValue		// 現在の値
)
{
	// サイズの更新
	m_fSizeLast = m_fConstance * fValue;
	// 目標のゲージのサイズが0未満の場合抜ける
	if (m_fSizeLast < 0)
	{
		return;
	}
	// 現在のサイズに代入(緑)
	m_size[GAUGE_MAINLINE].x = m_fSizeLast;
	// 差分分割
	m_fSizeDiff =
		(m_fSizeLast - m_size[GAUGE_UNDERLINE].x) /
		DERAY_TIME(1);

	// 位置の設定
	m_aScene_Two[GAUGE_MAINLINE]->SetSize(m_size[GAUGE_MAINLINE]);
	// 頂点座標の設定
	m_aScene_Two[GAUGE_MAINLINE]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ゲージ変化の定数処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetConstance(
	float const &fMaxValue	// 最大値
)
{
	// 定数設定
	m_fConstance = m_size[GAUGE_BLOCK].x / fMaxValue;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// カラーの設定処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetCol(
	D3DXCOLOR	const &Maincol,		// メインの色
	D3DXCOLOR	const &Undercol,	// 下の色
	D3DXCOLOR	const &Blockcol		// ブロックの色
)
{
	m_col[0] = Blockcol;
	m_col[1] = Undercol;
	m_col[2] = Maincol;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 位置設定処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetPos(D3DXVECTOR3 const & pos)
{
	m_pos = pos;
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		m_aScene_Two[nCnt]->SetPosition(m_pos);
		// 頂点座標の設定
		m_aScene_Two[nCnt]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 位置取得処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
D3DXVECTOR3 C2DGauge::GetPos(void) const
{
	return m_pos;
}
