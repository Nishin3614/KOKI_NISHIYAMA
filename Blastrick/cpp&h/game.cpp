// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ゲーム処理 [game.cpp]
// Author : KOKI NISHIYAMA
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "game.h"
/* 描画 */
#include "score.h"
#include "number.h"
#include "fade.h"
#include "game_ui.h"
#include "scene_three.h"
#include "floor.h"
#include "player.h"
#include "rothuman.h"
#include "meshobit.h"
#include "meshdome.h"
#include "meshsphere.h"
#include "3Deffect.h"
#include "forceline.h"
#include "bgdome.h"
#include "staticobj.h"
#include "meshwall.h"
#include "time.h"

#include "play_element_ui.h"
#include "topscore.h"
#include "scene_X.h"
#include "collision.h"
#include "camera.h"
#include "topscore.h"

#include "stategauge.h"

/* ポーズ */
#include "pause.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CGame::STATE CGame::m_state = CGame::STATE_NORMAL;
int CGame::m_nStage = 0;	// ステージ

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CGame::CGame()
{
	m_Time = NULL;
	m_Score = NULL;
	m_state = CGame::STATE_NORMAL;
	m_nCntTime = 0;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CGame::~CGame()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::Init(void)
{
	// 変数宣言
	/* 初期化 */
	// タイム
	m_Time = NULL;
	// スコア
	m_Score = NULL;
	// ふつう状態
	m_state = CGame::STATE_NORMAL;
	// カウントタイム
	m_nCntTime = 0;
	// 状態
	m_state = STATE_NORMAL;
	// ステージ
	m_nStage = 0;
	/* 作成 */	
	// 3Dエフェクトの生成
	C3DEffect::Create();
	// 軌跡の生成
	CMeshobit::Create();
	// 球の生成
	CMeshsphere::Create();
	// 球の設定
	CMeshsphere::Set(D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		5000.0f);
	// 壁の生成
	//CMeshwall::LoadCreate();
	// 読みこんだ当たり判定の生成
	CCollision::LoadCreate();
	// ドームの生成
	CBgdome::Create();
	// 集中線の生成
	CForceline::Create();
	// 集中線の使用状態
	CForceline::Use(true);
	// フロアー
	CFloor::Create(
		D3DXVECTOR3(0.0f,0.0f,0.0f),
		D3DXVECTOR3(1000.0f, 0.0f, 1000.0f),
		D3DXVECTOR3(0.0f, 0.0f, 0.0f),
		3, 3);
	// プレイヤー
	CPlayer::Create();
	// 敵
	CRothuman::Create(D3DXVECTOR3(100.0f,100.0f,100.0f));
	// 読み込んだ静的オブジェクトの情報の生成
	CStaticobj::LoadCreate();
	// スコア
	m_Score = CScore::Create(
		D3DXVECTOR3(SCREEN_WIDTH / 2,50.0f,0.0f));
	// タイム
	m_Time = CTime::Create(
		D3DXVECTOR3(1000.0f, 50.0f, 0.0f)
	);
	// ゲーム用UI
	//CGame_ui::Create();
	// ポーズの生成
	m_pause = new CPause();
	// ポーズの初期化
	m_pause->Init();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::Uninit(void)
{
	// ポーズ
	if (m_pause != NULL)
	{
		m_pause->Uninit();
		delete m_pause;
		m_pause = NULL;
	}
	// タイム
	m_Time = NULL;
	// スコア
	m_Score = NULL;
	CScene::ReleaseAll();
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::Update(void)
{
	/* ポーズ用 */
	// ゲーム状態の変更
	// キーボード //
	if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_P))
	{
		PauseState();
	}
	// ジョイパッド //
	else if (CManager::GetJoy() != NULL)
	{
		if (CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_START))
		{
			PauseState();
		}
	}
	// ポーズ状態ならば
	if (m_state == STATE_PAUSE)
	{
		if (m_pause != NULL)
		{
			m_pause->Update();
		}
	}
	// キーボード //
	if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_RETURN))
	{
		CRothuman::Create(D3DXVECTOR3(100.0f,100.0f,100.0f));
	}
	if (m_nCntTime == DERAY_TIME(1))
	{
		CRothuman::LoadCreate();
	}

	if (m_nCntTime == DERAY_TIME(10))
	{
		CRothuman::LoadCreate();
	}

	if (m_nCntTime == DERAY_TIME(20))
	{
		CRothuman::LoadCreate();
	}

	if (m_nCntTime == DERAY_TIME(30))
	{
		CRothuman::LoadCreate();
	}

	if (m_nCntTime == DERAY_TIME(40))
	{
		CRothuman::LoadCreate();
	}
	if (m_nCntTime == DERAY_TIME(50))
	{
		CRothuman::LoadCreate();
	}
	m_nCntTime++;
	if (m_Time->GetTimeOverFlag())
	{
		if (CManager::GetFade()->GetFade() == CFade::FADE_NONE)
		{
			CTopscore::SetScore(m_Score->GetScore());
			CManager::GetFade()->SetFade(CManager::MODE_RANKING);
		}
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::Draw(void)
{
	if (m_state == STATE_PAUSE)
	{
		if (m_pause != NULL)
		{
			m_pause->Draw();
		}
	}
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 状態取得
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CGame::STATE CGame::GetState(void)
{
	return m_state;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ステージ取得
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int CGame::GetStage(void)
{
	return m_nStage;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 状態設定
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::SetState(STATE state)
{
	m_state = state;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ポーズ状態
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGame::PauseState(void)
{
	// ゲーム状態をポーズに
	if (m_state != STATE_PAUSE)
	{
		m_state = STATE_PAUSE;
		CPause::SetPause(true);
	}
	// ゲーム状態をノーマルに
	else
	{
		m_state = STATE_NORMAL;
		CPause::SetPause(false);
	}
}
