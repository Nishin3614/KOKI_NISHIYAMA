// ------------------------------------------------------------------------------------------
//
// ライト処理 [light.cpp]
// Author : KOKI_NISHIYAMA
//
// ------------------------------------------------------------------------------------------
#include "light.h"

// ------------------------------------------------------------------------------------------
// マクロ定義
// ------------------------------------------------------------------------------------------
#define LIGHT_MAX (3)

// ------------------------------------------------------------------------------------------
// グローバル変数
// ------------------------------------------------------------------------------------------
D3DLIGHT9 g_light[LIGHT_MAX];	// ライト情報

// 拡散光の色
D3DXCOLOR col[LIGHT_MAX] =
{
	D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f),
	D3DXCOLOR(0.7f, 0.7f, 0.7f, 0.7f),
	D3DXCOLOR(0.2f, 0.2f, 0.2f, 0.2f)
};

// ------------------------------------------------------------------------------------------
// ライトの初期化処理
// ------------------------------------------------------------------------------------------
void InitLight(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();	// デバイスの取得

	// 設定用方向ベクトル
	D3DXVECTOR3 vecDir[LIGHT_MAX] =
	{
		D3DXVECTOR3(2.0f, -1.0f, 1.0f),
		D3DXVECTOR3(-2.0f, 1.0f, -0.50f),
		D3DXVECTOR3(0.0f, -1.0f, -2.0f),
	};							

	// カウントライト
	for (int nCntLight = 0; nCntLight < LIGHT_MAX; nCntLight++)
	{
		// ライトをクリアする
		ZeroMemory(&g_light[nCntLight], sizeof(D3DLIGHT9));

		// ライトの種類を設定
		g_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;

		// ライトの拡散光を設定
		g_light[nCntLight].Diffuse = col[nCntLight];

		// ライトの方向の設定
		D3DXVec3Normalize(&vecDir[nCntLight], &vecDir[nCntLight]);			// 正規化
		g_light[nCntLight].Direction = vecDir[nCntLight];					// ライトに代入

		// ライトを設定する
		pDevice->SetLight(nCntLight, &g_light[nCntLight]);

		// ライトを有効にする
		pDevice->LightEnable(nCntLight, TRUE);
	}
}

// ------------------------------------------------------------------------------------------
// ライトの終了処理
// ------------------------------------------------------------------------------------------
void UninitLight(void)
{
}

// ------------------------------------------------------------------------------------------
// ライトの更新処理
// ------------------------------------------------------------------------------------------
void UpdateLight(void)
{
}